#!/bin/sh
# start-stop-status
# Example reference: https://github.com/SynoCommunity/spksrc/blob/master/mk/spksrc.service.start-stop-status
# Synology reference: https://help.synology.com/developer-guide/synology_package/scripts.html

# optional - set these to the correct values if you use ACL in TVH, or use a custom host/scheme/port.
TVHUSER=""
TVHPASSWORD=""
TVHHOST="localhost"

# optional - change user/group to run HorEPG in daemonized mode (default). Differs between Tvheadend package distributions. Using the same user as Tvheadend allows access to xmltv.sock/xml output.
USER="sc-tvheadend"
# the most current Tvheadend package (from SynoCommunity) adds a common "sc-media" group used by more packages. That group would give HorEPG more permissions than it needs.
GROUP="tvheadend"

# optional - adjust when using xml output instead of xmltv.sock communication.
XMLOUTPUT="/volume1/documents"

# optional - adjust the path to Tvheadend's xmltv.sock. This path is for the most current Tvheadend package (SynoCommunity).
XMLTVSOCKET="/usr/local/tvheadend/var/epggrab/xmltv.sock"

# Default display name. Certain environment vars are only available if DSM calls the script. Provide backup values to be able to call the script directly.
if [ -z "${SYNOPKG_PKGNAME}" ]; then
    DNAME="HorEPG"
else
    DNAME="${SYNOPKG_PKGNAME}"
fi

if [ -z "${SYNOPKG_PKGDEST}" ]; then
    SYNOPKG_PKGDEST="/var/packages/${DNAME}/target"
fi

PATH="${SYNOPKG_PKGDEST}/env/bin:${PATH}"
PID_FILE="${SYNOPKG_PKGDEST}/horepgd.pid"

start_daemon ()
{
    # default: run daemonized, fetch 5 days, output to xmltv socket.
    python3 "${SYNOPKG_PKGDEST}/horepgd.py" -s ${XMLTVSOCKET} -d -p ${PID_FILE} -u ${USER} -g ${GROUP} -tvh ${TVHHOST} -tvh_username "${TVHUSER}" -tvh_password "${TVHPASSWORD}"

    # alternative: run daemonized, fetch 5 days, output to xml files.
    #python3 "${SYNOPKG_PKGDEST}/horepgd.py" -o ${XMLOUTPUT} -d -p ${PID_FILE} -u ${USER} -g ${GROUP} -tvh ${TVHHOST} -tvh_username "${TVHUSER}" -tvh_password "${TVHPASSWORD}"

    # debug: run-once, fetch 1 day, output to xml files.
    #python3 "${SYNOPKG_PKGDEST}/horepgd.py" -o ${XMLOUTPUT} -1 -nr 1 -p ${PID_FILE} -u ${USER} -g ${GROUP} -tvh ${TVHHOST} -tvh_username "${TVHUSER}" -tvh_password "${TVHPASSWORD}"
}

stop_daemon ()
{
    if [ -n "${PID_FILE}" -a -r "${PID_FILE}" ]; then
        PID=$(cat "${PID_FILE}")
        echo "Stopping ${DNAME} service ${PID} "
        kill -TERM $PID
        wait_for_status 1 20 || kill -KILL $PID
        if [ -f "${PID_FILE}" ]; then
            rm -f "${PID_FILE}" > /dev/null
        fi
    fi
}

daemon_status ()
{
    if [ -n "${PID_FILE}" -a -r "${PID_FILE}" ]; then
        if kill -0 $(cat "${PID_FILE}") > /dev/null 2>&1; then
            return
        fi
        rm -f "${PID_FILE}" > /dev/null
    fi
    return 1
}

wait_for_status ()
{
    timeout=$2
    # default value: 20 seconds
    counter=${timeout:=20}
    while [ ${counter} -gt 0 ]; do
        daemon_status
        [ $? -eq $1 ] && return
        let counter=counter-1
        sleep 1
    done
    return 1
}


case $1 in
    start)
        if daemon_status; then
            echo "${DNAME} is already running"
            exit 0
        else
            echo "Starting ${DNAME} ..."
            start_daemon
            exit $?
        fi
        ;;
    stop)
        if daemon_status; then
            echo "Stopping ${DNAME} ..."
            stop_daemon
            exit $?
        else
            echo "${DNAME} is not running"
            exit 0
        fi
        ;;
    restart)
        echo "Restarting ${DNAME} ..."
        stop_daemon
        start_daemon
        exit $?
        ;;
    status)
        if daemon_status; then
            echo "${DNAME} is running"
            exit 0
        else
            echo "${DNAME} is not running"
            exit 3
        fi
        ;;
    *)
        exit 1
        ;;
esac
